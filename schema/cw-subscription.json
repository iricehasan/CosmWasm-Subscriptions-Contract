{
  "contract_name": "cw-subscription",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_plan"
        ],
        "properties": {
          "create_plan": {
            "type": "object",
            "required": [
              "freeze_right_per_subscriber",
              "frequency",
              "price"
            ],
            "properties": {
              "description": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "external_url": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "freeze_right_per_subscriber": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "frequency": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_plan"
        ],
        "properties": {
          "update_plan": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "description": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "external_url": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "freeze_right_per_subscriber": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "frequency": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_plan"
        ],
        "properties": {
          "remove_plan": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_payments"
        ],
        "properties": {
          "withdraw_payments": {
            "type": "object",
            "required": [
              "amount",
              "id"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "freeze_subscription"
        ],
        "properties": {
          "freeze_subscription": {
            "type": "object",
            "required": [
              "duration_day",
              "id"
            ],
            "properties": {
              "duration_day": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "subscribe"
        ],
        "properties": {
          "subscribe": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "renew_subscription"
        ],
        "properties": {
          "renew_subscription": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pay_subscription"
        ],
        "properties": {
          "pay_subscription": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_subscription"
        ],
        "properties": {
          "cancel_subscription": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "query_plan_by_id"
        ],
        "properties": {
          "query_plan_by_id": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_config"
        ],
        "properties": {
          "query_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "query_subscriber"
        ],
        "properties": {
          "query_subscriber": {
            "type": "object",
            "required": [
              "address",
              "id"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "query_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryConfigResponse",
      "type": "object",
      "required": [
        "admin"
      ],
      "properties": {
        "admin": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "query_plan_by_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryPlanByIdResponse",
      "type": "object",
      "required": [
        "balance",
        "creator",
        "freeze_right_per_subscriber",
        "frequency",
        "id",
        "price",
        "subscribers"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/Uint128"
        },
        "creator": {
          "type": "string"
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "type": [
            "string",
            "null"
          ]
        },
        "freeze_right_per_subscriber": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "frequency": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        },
        "price": {
          "$ref": "#/definitions/Uint128"
        },
        "subscribers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Subscriber"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Subscriber": {
          "type": "object",
          "required": [
            "address",
            "currently_registered_plan",
            "is_expired",
            "left_freeze_right",
            "next_payment",
            "total_payments"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "currently_registered_plan": {
              "type": "string"
            },
            "is_expired": {
              "type": "boolean"
            },
            "left_freeze_right": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "next_payment": {
              "$ref": "#/definitions/Timestamp"
            },
            "total_payments": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Uint128"
              }
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "query_subscriber": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QuerySubscriberResponse",
      "type": "object",
      "required": [
        "address",
        "currently_registered_plan",
        "is_expired",
        "left_freeze_right",
        "next_payment",
        "total_payments"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "currently_registered_plan": {
          "type": "string"
        },
        "is_expired": {
          "type": "boolean"
        },
        "left_freeze_right": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "next_payment": {
          "$ref": "#/definitions/Timestamp"
        },
        "total_payments": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
